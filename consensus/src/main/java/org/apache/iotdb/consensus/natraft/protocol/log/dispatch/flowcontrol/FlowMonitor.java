/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.iotdb.consensus.natraft.protocol.log.dispatch.flowcontrol;

import org.apache.iotdb.consensus.common.Peer;
import org.apache.iotdb.consensus.natraft.protocol.RaftConfig;
import org.apache.iotdb.tsfile.utils.Pair;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayDeque;
import java.util.Date;
import java.util.Iterator;

public class FlowMonitor {

  private static final Logger logger = LoggerFactory.getLogger(FlowMonitor.class);
  private static final String FILE_SUFFIX = ".flow";
  private ArrayDeque<Pair<Long, Long>> windows;
  private long currWindowStart;
  private long currWindowSum;
  private long windowInterval;
  private Peer node;
  private int maxWindowSize;
  private BufferedWriter writer;
  private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  private RaftConfig config;

  public FlowMonitor(Peer node, RaftConfig config) throws IOException {
    this.maxWindowSize = config.getFlowMonitorMaxWindowNum();
    this.windows = new ArrayDeque<>(maxWindowSize);
    this.windowInterval = config.getFlowMonitorWindowInterval();
    this.node = node;
    this.config = config;
    initSerializer();
  }

  private void initSerializer() throws IOException {
    String path =
        config.getStorageDir()
            + File.separator
            + node.getEndpoint().getIp()
            + "-"
            + node.getEndpoint().getPort()
            + FILE_SUFFIX;
    File file = new File(path);
    file.delete();
    writer = new BufferedWriter(new FileWriter(file));
    writer.write("Time,FlowSum");
    writer.newLine();
  }

  public void close() {
    saveWindow();
    while (windows.size() > 0) {
      serializeWindow();
    }
    try {
      writer.close();
      logger.info("Flow monitor {} is closed", node);
    } catch (IOException e) {
      logger.warn("Cannot close serializer of {}", node, e);
    }
  }

  private void resetWindow(long newWindowStart) {
    currWindowStart = newWindowStart;
    currWindowSum = 0;
  }

  private void serializeWindow() {
    Pair<Long, Long> window = windows.removeFirst();
    try {
      String windowString =
          String.format("%s,%d", dateFormat.format(new Date(window.left)), window.right);
      logger.debug("New window {} serialized by {}", windowString, node);
      writer.write(windowString);
      writer.newLine();
    } catch (IOException e) {
      logger.warn("Cannot serialize window {} of {}", window, node, e);
    }
  }

  private void checkSize() {
    if (windows.size() == maxWindowSize) {
      serializeWindow();
    }
  }

  private void saveWindow() {
    if (currWindowSum != 0) {
      checkSize();
      windows.add(new Pair<>(currWindowStart, currWindowSum));
      logger.debug("New window {},{} generated by {}", currWindowStart, currWindowSum, node);
    }
  }

  public synchronized void report(long val) {
    long currTime = System.currentTimeMillis();
    long targetWindowStart = currTime - currTime % windowInterval;
    if (targetWindowStart != currWindowStart) {
      // save the current window and start a new window
      saveWindow();
      resetWindow(targetWindowStart);
    }
    // update the current window
    currWindowSum += val;
  }

  public double averageFlow(int windowsToUse) {
    long flowSum = currWindowSum;
    long intervalSum = System.currentTimeMillis() - currWindowStart;
    Iterator<Pair<Long, Long>> windowIterator = windows.descendingIterator();
    for (int i = 1; i < windowsToUse; i++) {
      if (windowIterator.hasNext()) {
        Pair<Long, Long> window = windowIterator.next();
        flowSum += window.right;
        intervalSum += windowInterval;
      } else {
        break;
      }
    }
    return flowSum * 1.0 / intervalSum * 1000;
  }
}
